{"name": "test_user_shop_not_pass", "status": "broken", "statusDetails": {"message": "ValueError: 元素未找到，且不在黑名单中", "trace": "args = (<page.main.Main object at 0x0000023BACA606C8>, 'xpath', \"//*[@text='我的推荐']\"), kwargs = {}\n_black_list = [('xpath', '//*[@text=\"以后再说\"]'), ('id', 'com.mstz.xf:id/agree'), ('id', 'com.mstz.xf:id/title_back_img'), ('xpath', '//*[@text=\"始终允许\"]'), ('id', 'com.mstz.xf:id/confirm')], BasePage = <class 'page.base_page.BasePage'>\ninstance = <page.main.Main object at 0x0000023BACA606C8>, f = <_io.BufferedReader name='tmp.png'>\ncontent = b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x048\\x00\\x00\\x08p\\x08\\x06\\x00\\x00\\x00\\xc8\\xbb\\x8e\\xfa\\x00\\x00\\x00\\x01sRG...\\x00\\xc0\\x9e\\xe0\\x00\\x00\\x00\\x00\\xf6\\x04\\x07\\x00\\x00\\x00\\xb0\\x17w!\\xf0\\xc9\\x1e\\xab\\x97\\n\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82'\nele = ('id', 'com.mstz.xf:id/title_back_img'), eles = [<appium.webdriver.webelement.WebElement (session=\"ff52bd57-82aa-4dbf-aef3-a467d31ad284\", element=\"dd61f977-fbc4-4b3c-9bf8-01d62e53b04e\")>]\n\n    def wrapper(*args, **kwargs):\n        # todo “以后再说”报错，当前提示无法弹出，待再次验证\n        _black_list = [\n            (By.XPATH, '//*[@text=\"以后再说\"]'),\n            (By.ID, 'com.mstz.xf:id/agree'),\n            (By.ID, \"com.mstz.xf:id/title_back_img\"),\n            (By.XPATH, '//*[@text=\"始终允许\"]'),\n            (By.ID, \"com.mstz.xf:id/confirm\")\n        ]\n        from page.base_page import BasePage\n        instance: BasePage = args[0]\n        try:\n            logging.info(\"run \" + func.__name__ + \"\\n args: \\n\" + repr(args[1:]) + \"\\n\" + repr(kwargs))\n>           element = func(*args, **kwargs)\n\n..\\page\\handle_black.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <page.main.Main object at 0x0000023BACA606C8>, by = 'xpath', locator = \"//*[@text='我的推荐']\"\n\n    @handle_black\n    def find(self, by, locator):\n        logging.info(\"find\")\n        logging.info(locator)\n        if locator is None:\n            result = self._driver.find_element(*by)\n        else:\n>           result = self._driver.find_element(by, locator)\n\n..\\page\\base_page.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"ff52bd57-82aa-4dbf-aef3-a467d31ad284\")>, by = 'xpath', value = \"//*[@text='我的推荐']\"\n\n    def find_element(self, by: str = By.ID, value: Union[str, Dict] = None) -> MobileWebElement:\n        \"\"\"'Private' method used by the find_element_by_* methods.\n    \n        Override for Appium\n    \n        Usage:\n            Use the corresponding find_element_by_* instead of this.\n    \n        Returns:\n            `appium.webdriver.webelement.WebElement`: The found element\n    \n        \"\"\"\n        # TODO: If we need, we should enable below converter for Web context\n        # if self.w3c:\n        #     if by == By.ID:\n        #         by = By.CSS_SELECTOR\n        #         value = '[id=\"%s\"]' % value\n        #     elif by == By.TAG_NAME:\n        #         by = By.CSS_SELECTOR\n        #     elif by == By.CLASS_NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = \".%s\" % value\n        #     elif by == By.NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = '[name=\"%s\"]' % value\n    \n        return self.execute(RemoteCommand.FIND_ELEMENT, {\n            'using': by,\n>           'value': value})['value']\n\n..\\venv\\lib\\site-packages\\appium\\webdriver\\webdriver.py:281: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"ff52bd57-82aa-4dbf-aef3-a467d31ad284\")>, driver_command = 'findElement', params = {'using': 'xpath', 'value': \"//*[@text='我的推荐']\"}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x0000023BAC063148>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"An element could not be located on the page u...ces\\\\\\\\app\\\\\\\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\appium-android-driver\\\\\\\\lib\\\\\\\\commands\\\\\\\\find.js:75:11)\"}}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n            super().check_response(response)\n        except WebDriverException as wde:\n            if wde.msg == 'No such context found.':\n                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde\n            else:\n>               raise wde\n\n..\\venv\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x0000023BAC063148>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"An element could not be located on the page u...ces\\\\\\\\app\\\\\\\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\appium-android-driver\\\\\\\\lib\\\\\\\\commands\\\\\\\\find.js:75:11)\"}}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n>           super().check_response(response)\n\n..\\venv\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x0000023BAC063148>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"An element could not be located on the page u...ces\\\\\\\\app\\\\\\\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\appium-android-driver\\\\\\\\lib\\\\\\\\commands\\\\\\\\find.js:75:11)\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: An element could not be located on the page using the given search parameters.\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nargs = (<page.main.Main object at 0x0000023BACA606C8>, 'xpath', \"//*[@text='我的推荐']\"), kwargs = {}\n_black_list = [('xpath', '//*[@text=\"以后再说\"]'), ('id', 'com.mstz.xf:id/agree'), ('id', 'com.mstz.xf:id/title_back_img'), ('xpath', '//*[@text=\"始终允许\"]'), ('id', 'com.mstz.xf:id/confirm')], BasePage = <class 'page.base_page.BasePage'>\ninstance = <page.main.Main object at 0x0000023BACA606C8>, f = <_io.BufferedReader name='tmp.png'>\ncontent = b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x048\\x00\\x00\\x08p\\x08\\x06\\x00\\x00\\x00\\xc8\\xbb\\x8e\\xfa\\x00\\x00\\x00\\x01sRG...xa8T\\xeafk\\xf0\\x03jl>\\x10\\xf5\\x98@\\xc9\\xcaS\\x92\\xf3G-\\xa6\\xff?\\xce\\xe6\\x11\\xcer\\x93\\x0b9\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82'\nele = ('xpath', \"//*[@text='朕知道了']\"), eles = []\n\n    def wrapper(*args, **kwargs):\n        # todo “以后再说”报错，当前提示无法弹出，待再次验证\n        _black_list = [\n            (By.XPATH, '//*[@text=\"以后再说\"]'),\n            (By.ID, 'com.mstz.xf:id/agree'),\n            (By.ID, \"com.mstz.xf:id/title_back_img\"),\n            (By.XPATH, '//*[@text=\"始终允许\"]'),\n            (By.ID, \"com.mstz.xf:id/confirm\")\n        ]\n        from page.base_page import BasePage\n        instance: BasePage = args[0]\n        try:\n            logging.info(\"run \" + func.__name__ + \"\\n args: \\n\" + repr(args[1:]) + \"\\n\" + repr(kwargs))\n>           element = func(*args, **kwargs)\n\n..\\page\\handle_black.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <page.main.Main object at 0x0000023BACA606C8>, by = 'xpath', locator = \"//*[@text='我的推荐']\"\n\n    @handle_black\n    def find(self, by, locator):\n        logging.info(\"find\")\n        logging.info(locator)\n        if locator is None:\n            result = self._driver.find_element(*by)\n        else:\n>           result = self._driver.find_element(by, locator)\n\n..\\page\\base_page.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"ff52bd57-82aa-4dbf-aef3-a467d31ad284\")>, by = 'xpath', value = \"//*[@text='我的推荐']\"\n\n    def find_element(self, by: str = By.ID, value: Union[str, Dict] = None) -> MobileWebElement:\n        \"\"\"'Private' method used by the find_element_by_* methods.\n    \n        Override for Appium\n    \n        Usage:\n            Use the corresponding find_element_by_* instead of this.\n    \n        Returns:\n            `appium.webdriver.webelement.WebElement`: The found element\n    \n        \"\"\"\n        # TODO: If we need, we should enable below converter for Web context\n        # if self.w3c:\n        #     if by == By.ID:\n        #         by = By.CSS_SELECTOR\n        #         value = '[id=\"%s\"]' % value\n        #     elif by == By.TAG_NAME:\n        #         by = By.CSS_SELECTOR\n        #     elif by == By.CLASS_NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = \".%s\" % value\n        #     elif by == By.NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = '[name=\"%s\"]' % value\n    \n        return self.execute(RemoteCommand.FIND_ELEMENT, {\n            'using': by,\n>           'value': value})['value']\n\n..\\venv\\lib\\site-packages\\appium\\webdriver\\webdriver.py:281: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"ff52bd57-82aa-4dbf-aef3-a467d31ad284\")>, driver_command = 'findElement', params = {'using': 'xpath', 'value': \"//*[@text='我的推荐']\"}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x0000023BAC063148>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"An element could not be located on the page u...ces\\\\\\\\app\\\\\\\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\appium-android-driver\\\\\\\\lib\\\\\\\\commands\\\\\\\\find.js:75:11)\"}}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n            super().check_response(response)\n        except WebDriverException as wde:\n            if wde.msg == 'No such context found.':\n                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde\n            else:\n>               raise wde\n\n..\\venv\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x0000023BAC063148>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"An element could not be located on the page u...ces\\\\\\\\app\\\\\\\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\appium-android-driver\\\\\\\\lib\\\\\\\\commands\\\\\\\\find.js:75:11)\"}}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n>           super().check_response(response)\n\n..\\venv\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x0000023BAC063148>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"An element could not be located on the page u...ces\\\\\\\\app\\\\\\\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\appium-android-driver\\\\\\\\lib\\\\\\\\commands\\\\\\\\find.js:75:11)\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: An element could not be located on the page using the given search parameters.\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <mstz.testcase.test_user_shop.TestUserShop object at 0x0000023BAC9E9188>\n\n    def setup(self):\n>       self.shop = App().start().main().goto_usershop()\n\ntest_user_shop.py:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\page\\main.py:57: in goto_usershop\n    self.steps(\"../data/main.yaml\", \"goto_usershop\")\n..\\page\\base_page.py:80: in steps\n    self.find(step[\"by\"], step[\"locator\"]).click()\n..\\page\\handle_black.py:47: in wrapper\n    return wrapper(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (<page.main.Main object at 0x0000023BACA606C8>, 'xpath', \"//*[@text='我的推荐']\"), kwargs = {}\n_black_list = [('xpath', '//*[@text=\"以后再说\"]'), ('id', 'com.mstz.xf:id/agree'), ('id', 'com.mstz.xf:id/title_back_img'), ('xpath', '//*[@text=\"始终允许\"]'), ('id', 'com.mstz.xf:id/confirm')], BasePage = <class 'page.base_page.BasePage'>\ninstance = <page.main.Main object at 0x0000023BACA606C8>, f = <_io.BufferedReader name='tmp.png'>\ncontent = b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x048\\x00\\x00\\x08p\\x08\\x06\\x00\\x00\\x00\\xc8\\xbb\\x8e\\xfa\\x00\\x00\\x00\\x01sRG...xa8T\\xeafk\\xf0\\x03jl>\\x10\\xf5\\x98@\\xc9\\xcaS\\x92\\xf3G-\\xa6\\xff?\\xce\\xe6\\x11\\xcer\\x93\\x0b9\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82'\nele = ('xpath', \"//*[@text='朕知道了']\"), eles = []\n\n    def wrapper(*args, **kwargs):\n        # todo “以后再说”报错，当前提示无法弹出，待再次验证\n        _black_list = [\n            (By.XPATH, '//*[@text=\"以后再说\"]'),\n            (By.ID, 'com.mstz.xf:id/agree'),\n            (By.ID, \"com.mstz.xf:id/title_back_img\"),\n            (By.XPATH, '//*[@text=\"始终允许\"]'),\n            (By.ID, \"com.mstz.xf:id/confirm\")\n        ]\n        from page.base_page import BasePage\n        instance: BasePage = args[0]\n        try:\n            logging.info(\"run \" + func.__name__ + \"\\n args: \\n\" + repr(args[1:]) + \"\\n\" + repr(kwargs))\n            element = func(*args, **kwargs)\n            # 清空错误次数\n            _error_num = 0\n            instance.set_implicitly_wait(5)\n            return element\n        except Exception as e:\n            instance.screenshot(\"tmp.png\")\n            with open(\"tmp.png\", \"rb\") as f:\n                content = f.read()\n            allure.attach(content, attachment_type=allure.attachment_type.PNG)\n            logging.error(\"element not found, handle black list\")\n            instance.set_implicitly_wait(5)\n            # 如果次数太多，就退出异常逻辑，直接保错\n            if instance._error_num > instance._max_err_num:\n                instance._error_num = 0\n                raise e\n            # 记录一直异常的次数\n            instance._error_num += 1\n            # 对黑名单里的弹框进行处理\n            for ele in instance._black_list:\n                logging.info(ele)\n                eles = instance.finds(ele)\n                if len(eles) > 0:\n                    eles[0].click()\n                    # 继续寻找原来的正常控件\n                    return wrapper(*args, **kwargs)\n            # 如果黑名单也没有，就报错\n            logging.warning(\"black list no one foound\")\n>           raise ValueError(\"元素未找到，且不在黑名单中\")\nE           ValueError: 元素未找到，且不在黑名单中\n\n..\\page\\handle_black.py:50: ValueError"}, "attachments": [{"source": "13bbde53-aa4d-4db6-8c25-0ae73eec7860-attachment.png", "type": "image/png"}, {"source": "85c2e365-fed7-458e-a6af-a126dfa55375-attachment.png", "type": "image/png"}, {"name": "log", "source": "90abec7c-c9b7-46b4-a369-0714c1d70a14-attachment.txt", "type": "text/plain"}], "start": 1617868755592, "stop": 1617868755592, "uuid": "dca02b6c-ae56-4a98-ad09-685753b3d1cd", "historyId": "41ca488b3c810952eb167dd4eee403ea", "testCaseId": "e9070247239896419150148eb39335e8", "fullName": "testcase.test_user_shop.TestUserShop#test_user_shop_not_pass", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_user_shop"}, {"name": "subSuite", "value": "TestUserShop"}, {"name": "host", "value": "DESKTOP-2SAB6FS"}, {"name": "thread", "value": "13412-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_user_shop"}]}